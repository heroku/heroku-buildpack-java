#!/usr/bin/env bash

export BUILDPACK_HOME="${BUILDPACK_HOME:-$(pwd)}"


error() {
  echo "$1"
}

testDetect()
{
  createPom "$(withDependency)"

  detect

  assertAppDetected "Maven"
}

testDetectPomXml()
{
  touch ${BUILD_DIR}/pom.xml

  detect

  assertAppDetected "Maven"
}

testDetectPomAtom()
{
  touch ${BUILD_DIR}/pom.atom

  detect

  assertAppDetected "Maven"
}

testDetectPomClj()
{
  touch ${BUILD_DIR}/pom.clj

  detect

  assertAppDetected "Maven"
}

testDetectPomGroovy()
{
  touch ${BUILD_DIR}/pom.groovy

  detect

  assertAppDetected "Maven"
}

testDetectPomRb()
{
  touch ${BUILD_DIR}/pom.rb

  detect

  assertAppDetected "Maven"
}

testDetectPomScala()
{
  touch ${BUILD_DIR}/pom.scala

  detect

  assertAppDetected "Maven"
}

testDetectYml()
{
  touch ${BUILD_DIR}/pom.yml

  detect

  assertAppDetected "Maven"
}

testDetectYaml()
{
  touch ${BUILD_DIR}/pom.yaml

  detect

  assertAppDetected "Maven"
}

testNoDetectMissingPomFile()
{
  detect

  assertEquals "1" "${RETURN}"
}

testNoDetectPomFileAsDir()
{
  mkdir -p ${BUILD_DIR}/pom.xml

  detect

  assertEquals "1" "${RETURN}"
}

testCompileWithoutSystemProperties() {
  createPom "$(withDependency)"
  assertTrue "Precondition" "[ ! -f ${BUILD_DIR}/system.properties ]"

  build

  assertCapturedSuccess
  _assertMavenLatest
  # TODO check layer and layer.toml
}

testCustomSettingsXml()
{
  createPom "$(withDependency)"
  createSettingsXml

  build

  assertCapturedSuccess
  assertCaptured "Should download from JBoss" "Downloading from jboss-no-bees: http://repository.jboss.org/nexus/content/groups/public"
}

testCustomSettingsXmlWithPath()
{
  createPom "$(withDependency)"
  mkdir -p $BUILD_DIR/support
  createSettingsXml "${BUILD_DIR}/support/settings.xml"

  export MAVEN_SETTINGS_PATH="${BUILD_DIR}/support/settings.xml"

  build

  assertCapturedSuccess
  assertCaptured "Should download from JBoss" "Downloading from jboss-no-bees: http://repository.jboss.org/nexus/content/groups/public"

  unset MAVEN_SETTINGS_PATH
}

testCustomSettingsXmlWithUrl()
{
  createPom "$(withDependency)"
  mkdir -p /tmp/.m2
  createSettingsXml "/tmp/.m2/settings.xml"

  export MAVEN_SETTINGS_URL="file:///tmp/.m2/settings.xml"

  build

  assertCapturedSuccess
  assertCaptured "Should download from JBoss" "Downloading from jboss-no-bees: http://repository.jboss.org/nexus/content/groups/public"

  unset MAVEN_SETTINGS_URL
}

testCustomSettingsXmlWithInvalidUrl()
{
  createPom
  export MAVEN_SETTINGS_URL="https://example.com/ha7s8duysadfuhasjd/settings.xml"
  build
  assertCapturedError
  unset MAVEN_SETTINGS_URL
}

testIgnoreSettingsOptConfig()
{
  createPom "$(withDependency)"
  export MAVEN_SETTINGS_OPT="-s nonexistant_file.xml"
  build
  assertCapturedSuccess
  unset MAVEN_SETTINGS_OPT
}

testMavenUpgrade()
{
  cat > ${BUILD_DIR}/system.properties <<EOF
maven.version=3.2.5
EOF

  createPom "$(withDependency)"

  build
  assertCapturedSuccess

  _assertMaven325

  cat > ${BUILD_DIR}/system.properties <<EOF
maven.version=3.3.9
EOF

  build
  assertCapturedSuccess

  _assertMaven339
}

testMavenInvalid()
{
  cat > ${BUILD_DIR}/system.properties <<EOF
maven.version=9.9.9
EOF

  createPom "$(withDependency)"

  build

  assertCapturedError "you have defined an unsupported Maven version"
}

# testing utils
source "${BUILDPACK_HOME}/test/stdlib_stubs.sh"
source "${BUILDPACK_HOME}/test/utils"
source "${BUILDPACK_HOME}/test/helpers.sh"

# mimic the heroku/jvm buildpack so we can run maven
source "${BUILDPACK_HOME}/lib/common.sh"
install_jdk "$(mktemp -d ${SHUNIT_TMPDIR}/jdk.XXXX)" "$(mktemp -d)" > /dev/null 2>&1

# import the testing framework
source "${BUILDPACK_HOME}/test/shunit2"
