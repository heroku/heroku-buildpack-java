#!/usr/bin/env bash
# Usage: bin/report <build-dir> <cache-dir> <env-dir>

# Produces a build report containing metadata about the build, that's consumed by the build system.
# This script is run for both successful and failing builds, so it should not assume the build ran
# to completion (e.g. OpenJDK may not even have been installed).
#
# Metadata must be emitted to stdout as valid YAML key-value pairs. Any fields that should always
# be typed as a string must be explicitly quoted.
#
# Example valid stdout:
#   openjdk_version: 'X.Y.Z'
#   openjdk_install_duration: 1.234
#
# Failures in this script don't cause the overall build to fail (and won't appear in user
# facing build logs) to avoid breaking builds unnecessarily / causing confusion. To debug
# issues check the internal build system logs for `buildpack.report.failed` events, or
# when developing run `make run` in this repo locally, which runs `bin/report` too.

set -euo pipefail
shopt -s inherit_errexit

CACHE_DIR="${2}"

# The absolute path to the root of the buildpack.
BUILDPACK_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)"

# The build system doesn't source the `export` script before running this script, so we have to do
# so manually (if it exists) so that buildpack java can be found (if the build succeeded).
EXPORT_FILE="${BUILDPACK_DIR}/export"
if [[ -f "${EXPORT_FILE}" ]]; then
	# shellcheck source=/dev/null
	source "${EXPORT_FILE}"
fi

source "${BUILDPACK_DIR}/lib/metadata.sh"
meta_init "${CACHE_DIR}" "java"

# Emit the key / value pair unquoted to stdout. Skips if the value is empty.
# Based on: https://github.com/heroku/heroku-buildpack-nodejs/blob/main/bin/report
kv_pair() {
	local key="${1}"
	local value="${2}"
	if [[ -n "${value}" ]]; then
		echo "${key}: ${value}"
	fi
}

# Emit the key / value pair to stdout, safely quoting the string. Skips if the value is empty.
# Based on: https://github.com/heroku/heroku-buildpack-nodejs/blob/main/bin/report
# (Though instead uses single quotes instead of double to avoid escaping issues.)
kv_pair_string() {
	local key="${1}"
	local value="${2}"
	if [[ -n "${value}" ]]; then
		# Escape any existing single quotes, which for YAML means replacing `'` with `''`.
		value="${value//\'/\'\'}"
		echo "${key}: '${value}'"
	fi
}

STRING_FIELDS=(
	# Fields coming from jvm-common
	openjdk_version
	openjdk_distribution
	openjdk_version_selector
)

# We don't want to quote numeric or boolean fields.
ALL_OTHER_FIELDS=(
	# Fields coming from jvm-common
	openjdk_install_duration
	app_has_jdk_overlay
)

for field in "${STRING_FIELDS[@]}"; do
	# shellcheck disable=SC2312 # TODO: Invoke this command separately to avoid masking its return value.
	kv_pair_string "${field}" "$(meta_get "${field}")"
done

for field in "${ALL_OTHER_FIELDS[@]}"; do
	# shellcheck disable=SC2312 # TODO: Invoke this command separately to avoid masking its return value.
	kv_pair "${field}" "$(meta_get "${field}")"
done
